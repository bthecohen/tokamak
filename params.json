{"name":"Tokamak","tagline":"A programmatic PHP DOM rendering library with simple one-way data flow","body":"# Tokamak\r\n\r\n## Introduction\r\n\r\nTokamak is a PHP library for programmatic DOM templating. It provides an abstraction over PHP's DOMDocument API, presenting a simple DSL for defining both templates and reusable components. This interface emphasizes unidirectional, top-down data flow and is (loosely) inspired by React.js. Unlike React, this library is used for stateless server-side rendering; therefore, elements in Tokamak are stateless, and are only rendered once.\r\n\r\nNote: Tokamak is in the early stages of development and is not yet suitable for production usage. However, if its approach interests you, please do try it out and provide feedback.\r\n\r\n## Usage\r\n\r\n### Documents\r\nYou can create an HTML template by extending Tokamak's HTMLClass and providing an implementation of the render method:\r\n\r\n```PHP\r\n<?php\r\nuse Tokamak\\Dom\\HTMLDocument;\r\n\r\nclass SimpleTemplate extends HTMLDocument\r\n{\r\n\r\n\tprotected function render()\r\n\t{\r\n\t\t$html = $this->appendElement('html');\r\n\t        $head = $html->appendElement('head');\r\n\t\t\t\t$head->appendElement('title', null, $this->data['title']); // data passed in via constructor\r\n\t\t\t$h1 = $html->appendElement('body')\r\n                            ->appendElement('h1', null, 'Test Document'); // supports method chaining\r\n\r\n\t}\r\n\r\n}\r\n```\r\n\r\nThen, you can pass in data when constructing an instance, and output it to an HTML string:\r\n\r\n```PHP\r\n<?php\r\n$t = new SimpleTemplate(array('title' => 'Example');\r\necho $t->toString();\r\n```\r\n\r\nWhich will result in the following HTML being output:\r\n\r\n```HTML\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Example</title>\r\n<meta charset=\"UTF-8\">\r\n</head>\r\n<body><h1>Test Document</h1></body>\r\n</html>\r\n```\r\n\r\n### Components\r\n\r\nIn addition to document templates, Tokamak lets you create custom components. Components are reusable pieces of\r\nDOM that can be used to implement widgets and page partials. Like documents, their data is passed to them by\r\ntheir parent elements.\r\n\r\nMuch like a Document, you create a component by extending Tokamak's Component class and implementing the internal render method:\r\n\r\n```PHP\r\n<?php\r\nuse Tokamak\\Dom\\Component\r\n\r\nclass Head extends Component {\r\n\tprotected function render(){\r\n\t\t$head = $this->appendElement('head');\r\n\t\t$head->appendElement('title', null, $this->data['title']);\r\n\t\t$head->appendElement('meta', array('charset' => $this->dom->encoding));\r\n\t}\r\n}\r\n```\r\n\r\nYou can append a component class to a Document or to another Component via the `appendComponent` method:\r\n\r\n```PHP\r\nuse Tokamak\\Dom\\HTMLDocument;\r\n\r\nclass DocumentWithComponent extends HTMLDocument\r\n{\r\n\r\n\tprotected function render()\r\n\t{\r\n\t\t$body = $this->appendElement('html')\r\n\t\t\t    ->appendComponent('Head', $this->data)\r\n\t\t\t\t->appendElement('body', null);\r\n\t\t\t\t\t$body->appendElement('h1', null, 'Test Document');\r\n\r\n\t}\r\n\r\n}\r\n```\r\n\r\nNow, we've abstracted the `<head>` element as a reusable component. Rendering the document gives us the following:\r\n \r\n```HTML\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Example</title>\r\n<meta charset=\"UTF-8\">\r\n</head>\r\n<body><h1>Test Document</h1></body>\r\n</html>\r\n```\r\n\r\n### Closures\r\n\r\nIn addition to method chaining, Tokamak supports using closures as callbacks in order to append multiple levels of elements with one method call. This is useful for adding multiple nodes to a child node, and obviates the need for assigning nodes to intermediate variables. The following example produces the same output as the above template:\r\n\r\n```PHP\r\n<?php\r\n\r\nuse Tokamak\\Dom\\HTMLDocument;\r\n\r\nclass ExampleDocumentWithClosures extends HTMLDocument\r\n{\r\n\tprotected function render()\r\n\t{\r\n\t\t$data = $this->data;\r\n\t\t$this->appendElement('html', null, '', function() use ($data){\r\n\t\t\t$this->appendComponent('Head', $data);\r\n\t\t})\r\n\t\t->appendElement('body', null, '', function(){\r\n\t\t\t$this->appendElement('h1', null, 'Test Document');\r\n\t\t});;\r\n\r\n\t}\r\n}\r\n```\r\n\r\nNote in the above example that any data must be explicitly passed to the closure.\r\n\r\n## Installation\r\n\r\nInstall via Composer, by adding a dependency on `tokamak/tokamak` to your composer.json file or by running\r\n\r\n```\r\ncomposer require tokamak/tokamak\r\n```\r\n\r\non the command line in your project directory.\r\n\r\n## API Docs\r\n\r\nRead the API docs [here.](documentation/api/)\r\n\r\n## Limitations/Planned Features\r\n\r\n* I plan to implement selector methods to access descendant nodes.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}